###########Feb 27####################

20.Introduction to Java varialbles and datatypes with examples 
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\coreJavabasics.java
/coreJavaLearningtwofive/src/coreJavaLearningtwofive/coreJavabasics.java

//lecture 20 : About java data types 

package coreJavaLearningtwofive;

public class coreJavabasics {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int num = 5 ;
		String website = "raghavendra test" ;
		char letter = 'r';
		double dec = 5.99 ;
		boolean mycard = true ;
		
		System.out.println(num);
		System.out.println(num + " My num is stored in num variable");

	}

}


21 : What are arrays in java ? How to initialize and retrieve the values of array 
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\coreJavabasics.java
/coreJavaLearningtwofive/src/coreJavaLearningtwofive/coreJavabasics.java

22:Introduction to for loop to iterate over array of strings and integers 
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\coreJavabasics.java
/coreJavaLearningtwofive/src/coreJavaLearningtwofive/coreJavabasics.java

23.Enhanced for loop declaration and using conditional statements inside the loops

I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\coreJavaBrushup2.java

25 : What is arraylist and differences between Arraylist and arrays

Arraylist = we can dynamically grow the size of array
new operator will allocate memory 
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\coreJavaBrushup2.java

26: Iterating over array and arraylists and its related methods 
array means length
arraylist means size 
we can convert array to array list 
array - static size 
array_list  - dynamic size 
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\coreJavaBrushup2.java

27.Strings in Java - How to declare strings and important string methods 
string is an object in java 
String is an object that represents sequence of characters 
string literal or new object 
String a = "Raghavendra automation"
String a1 = "Raghavendra automation"
same reference here 
String abc = new String("Welcome");
String abc2 = new String("Welcome" )

2 types of declaration :
literal 
and using new keyword 

new creates new object in memory space
literal it refers to the same object 

printing string in reverse
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\coreJavaBrushup3Strings.java

28.How to create methods and access methods using Java class objects 
Set of lines which we will repeatedly call 
Method should be written outside main block 
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\MethodsDemo.java

static will move method to class level 
from public 
Method cannot be created inside main block 
Method is like functions in python.

282 : while loop :
while (boolean){
}
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\whileDemo.java

283 : do while loop 
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\whileDemo.java

do executes first and then evaluates 
1 loop execution is guaranteed 

285 :Nested loops 
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\demoPack\NestedLoops.java

286 : printing pyramid triangle 
1 2 3 4 
5 6 7 
8 9 
10 

package demoPack;

public class interview_pyramid_printing_triangle {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int k = 1 ;
		for ( int i = 0; i < 4 ;i++) {
			//System.out.println("Outer loop started ");

			for (int j = 1 ; j <=  4-i ; j++ ) {
				//System.out.println("Inner loop ");
				System.out.print(k);
				System.out.print("\t");
				k++ ;
		}
			System.out.println("");
		}

	}

}


1	2	3	4	
5	6	7	
8	9	
10	

1
2 3 
4 5 6 
7 8 9 10 
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\demoPack\pyramid_excercise2.java

1
1 2 
1 2 3 
1 2 3 4 

3 
6 9 
12 15 18 

3	
6	9	
12	15	18	
21	24	27	30
###########Feb 28####################

289:Interface :
Interface will have methods , but not body 
Classes should define and implement methods present in interface

I:\Learnings\Raghavendra\gitdemo\javaselenium\src\demoPack\CentralTraffic.java
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\demoPack\AustralianTraffic.java

290 : How java classes take advantage of interfaces 
one class can implement more interfaces :
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\demoPack\ContinentalTraffic.java

292. what are abstract classes ? how it is different from interfaces ?
abstraction : hiding implementation details from user 
only functionality will be provided to user .
in other words , user will have the information on what object does instead of how it does it 

Abstract classes and methods : 
Class which is declared with abstract keyword is known as abstract class in java 

it can have abstract (method without the body) and non abstract methods (method with the body)

Abstraction classes achieve partial abstraction .

Interfaces on the other had are used for 100% abstraction 




Real life example :
Ther is a parent class which defined aircraft body construction rules 

All child classes ( different aircraft companies ) have to inherit parent class and use those 
methods to build their own aircraft

but there is a method called aircraft colour which can be unique to every child  class depending on company logo 

so color method in parent class is not implemented with any body .Instead only method is defined without any body which is called abstract method

if there is any method in a class which is abstact . then the class will be treated as abstract class

unlike interfaces , the abstract class can have methods (concrete) which have implementation as well , So with abstract class only partial abstarction is achieved 

I:\Learnings\Raghavendra\gitdemo\javaselenium\src\demoPack\ChildEmirates.java
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\demoPack\ParentAircraft.java

you cannot instantiate object for abstract class 

ParentAircraft b = new ParentAircraft();
it cannot be created 

*****Interview*****

Interface : 
1.Interface contains only abstract methods
2.Access specifiers for methods in interface must be public 
3.variables defined must be public , static , final 
4.To implement an interface we use implements keyword

Abstract class : 
1.Abstract class can contain abstarct methods, concrete methods or both 
2.Except private we can have any access specifier for methods in abstract class
3.Except private variables can have any access specifiers 
4.To implement an abstract we use extends keyword 

293. Inheritance in Java 
vehicle example 
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\oopsCoreJava\parentClass.java
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\oopsCoreJava\childClass.java

294. Practical example on typs of inheritance .

Mulitple inheritances are not allowed in java
interface it is allowed - whereas multiple interface is allowed 
class X 
{
//Class X members
}

class Y 
{
//Class Y members 
}

class Z extends X,Y
{
//class Z members 
}


class A 
{
int i = 10
}

class B extends A {
int i = 20 
}

public class main class {
	public static void main (String[] args) {
	{
		A a = new B()
		webdriver driver = new FirefoxDriver();
		System.out.println(a.i)
	}
}

296: Function /Method overloading 
-either argument count should be different
-either argument data type should be different

I:\Learnings\Raghavendra\gitdemo\javaselenium\src\oopsCoreJava\FunctlionOverloadingExample.java

*****Interview*****


Tool and Technology Selection

Challenge: Choosing the right tools and libraries for test automation, especially with evolving technologies.

Solution: Conducted a proof of concept (POC) to evaluate tools like Selenium, Appium, or Cypress, based on project requirements, team skill set, and project tech stack.

2. Scalability and Maintenance

Challenge: Ensuring the framework scales with increasing test cases and is easy to maintain.

Solution: Adopted modular architecture with reusable components, such as Page Object Model (POM) and utility classes. Used design patterns like Singleton for WebDriver management.

3. Integration with CI/CD

Challenge: Integrating the framework with CI/CD pipelines to enable continuous testing.

Solution: Configured tools like Jenkins, GitHub Actions, or Azure DevOps to trigger tests automatically on every code change, and set up email/slack notifications for test results.

4. Dynamic Web Elements

Challenge: Handling elements with dynamic attributes or frequently changing locators.

Solution: Used advanced locator strategies like XPath axes, CSS selectors, and relative locators. Introduced robust wait mechanisms (explicit and fluent waits) to avoid timing issues.

5. Cross-Browser and Cross-Platform Testing

Challenge: Ensuring tests work seamlessly across different browsers and platforms.

Solution: Integrated cross-browser testing tools like Selenium Grid or cloud solutions (e.g., BrowserStack, Sauce Labs). Designed test data and configurations to run on various environments.

6. Test Data Management

Challenge: Managing test data for different environments and scenarios.

Solution: Centralized test data in files (e.g., JSON, Excel) or databases. Used tools like Apache POI for Excel and ensured data-driven tests with TestNG’s @DataProvider or JUnit’s parameterized tests.

7. Error Handling and Reporting

Challenge: Identifying flaky tests and understanding test failures effectively.

Solution: Implemented retry logic for flaky tests using RetryAnalyzer in TestNG. Used reporting tools like Allure, Extent Reports, or Serenity for detailed reporting with screenshots, logs, and test execution steps.

8. Team Collaboration

Challenge: Aligning diverse team members on framework standards and practices.

Solution: Documented framework structure, coding standards, and best practices. Conducted training sessions and regular code reviews to ensure consistency.

9. Execution Speed

Challenge: Long test execution times for large test suites.

Solution: Parallelized test execution using TestNG/JUnit and Selenium Grid. Prioritized tests based on impact and executed critical tests first.

10. Adapting to New Requirements

Challenge: Updating the framework to support new features or technologies.

Solution: Designed the framework to be modular and extensible, enabling smooth addition of new features without disrupting the existing structure.

297:Method / Function Overriding 

*****Interview*****
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\oopsCoreJava\ChildFunction.java
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\oopsCoreJava\ParentFunction.java

299: array and their usage in java 
container which store  mutiple value of same datatype 
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\ArrayDemo.java
new keyword allocates memory 
Allocate memory and then assign values 
int[] a = new int[5];

assign variable immediately 
memory will be dynamically allocated .

300:Multidimensional array 
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\MultiDimensionArrayDemo.java

301 . program on multidimension array 
I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\MultiDimensionArrayDemo.java

303.Printing smallest number 
*****Interview*****
2 4 5 
3 4 7 
1 2 9 
print minimum number from above matrix 

I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\InterviewMinimumNumber.java

I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\InterviewMinimumNumber.java

I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\Interview_max_number_from_array.java

304 : cisco interview question on arrays :

2 4 5 
3 4 7 
1 2 9 

Printing max number in min number column

Step 1 : Find minimum number
Step 2 : Identify column of min number
Step 3 : Find max number in identified column 

I:\Learnings\Raghavendra\gitdemo\javaselenium\src\coreJavaLearningtwofive\Cisco_interview_Question.java


###########march 1 ####################
306 : Date class concepts 
C:\RD\Trainings\gitrepos\javaselenium\src\coreJavaLearningtwofive\dateDemo.java
java .util package 

Date d = new Date();
//System.out.println(d.toString());
		
		SimpleDateFormat sdf = new SimpleDateFormat("MMM/DD/YYYY");
		SimpleDateFormat sdf2 = new SimpleDateFormat("EEE, MMM d, YYYY");
		System.out.println(sdf.format(d));
		System.out.println(sdf2.format(d));
		
307: calender objects in java 

308.Constructor 
C:\RD\Trainings\gitrepos\javaselenium\src\coreJavaLearningtwofive\ConstructDemo.java

Whenever a object is created a block of code is executed .
called constructor 
--will not return any value
--it should be always class name only 
--compliler will call default /implicit construtor 
--if we define it will call explicit construtor 

309. Types of constructor .
Parameterized constructor 

C:\RD\Trainings\gitrepos\javaselenium\src\coreJavaLearningtwofive\ConstructDemo.java

311. Super keyword 
C:\RD\Trainings\gitrepos\javaselenium\src\coreJavaLearningtwofive\childSuperDemo.java
C:\RD\Trainings\gitrepos\javaselenium\src\coreJavaLearningtwofive\ParentSuperDemo.java

super refers to parent class 

312 . Super keyword practical usage 
//common method between parent and child 
how to handle it 
super should be the first line in constuctor.

313. This keyword 

C:\RD\Trainings\gitrepos\javaselenium\src\coreJavaLearningtwofive\ThisKeywordDemo.java
this scope is at class level , not method level 
you should write step by step code and understand .
this refers to global variable 
not the variable present in our local methods 
No parent child concept in this keyword 


314 : Static and non static importance in java 

Instance varialbles ?
local variables ?
class variables ?
static keyword
static method and static variable 
static block 

C:\RD\Trainings\gitrepos\javaselenium\src\variablesRelated\StaticVar.java

objects need to be created to access varaibles and methods of same class as well 

creating object and creating instance both are same 

instance variable no sharing 

static methods will only accept static variables 
we can call static method with class name and not object name .

315 : Final keyword 
C:\RD\Trainings\gitrepos\javaselenium\src\coreJavaLearningtwofive\FinalDemo.java

final means constant variable 
no one can change 

even class and method can be final 
class marked as final cannot be extended .

public class test 
final class test 

final methods cannot be overridden

final/pubic void testmethod 



316 : packages and their usage in oops
set of classes and interfaces 
java.lang - Default - comes with java compiler inbuilt 
(int , array etc ) 



java.util.ArrayList 
java.util.Hashset
import corejava.arraydemo

317 . Types of packages and how they will help in realtime 

Class A can use Class B directly by creating object if both class A and B belongs to same package.
import package.classname 

318. Access modifiers
=======
###################3- Mar #################
318.Importance of access modifiers 

--public 
--private
--protected 
--default 

//Default - access method anywhere in  package- eventhogh we import it as package. we cannot access it outside package 
//public - we can access across package or anywhere 


319. Private and protected .

//private : you cannot access method or varaiable outside class 
//protected - only subclasses can access 

public
--protected(subclasses)
--default(same package)
--private (same class)

320. Diff kind of exceptions 




